<?php
defined('BASEPATH') OR exit('No direct script access allowed');
class Admin extends CI_Controller {
	
	public function __construct() {
		parent::__construct();
		$config['charset'] = 'utf-8'; 
		$config['wordwrap'] = TRUE;
		$config['mailtype'] = 'html';
		//$this->email->initialize($config);
		$this->load->library('form_validation');
		//$this->lang->load('message','english');
		$this->load->model('Admin_model');
			$this->load->model('Common_model');
			$this->load->model('My_model'); 
		$this->check_login();
	} 
	public function check_login() {
		if(!$this->session->userdata('session_adminId'))
		{
			redirect('Admin');
		} 
	}
	function accept_cashout_payouts(){
	$user_id = $_POST['user_id'];
	$payment_id = $_POST['payment_id'];
	$request_amount = $_POST['request_amount'];
	$this->Common_model->accept_cashout_payouts($user_id,$payment_id,$request_amount);
	}	
	function reject_cashout_payouts(){
		$reject_mgs = $_POST['reject_mgs'];
		$user_id = $_POST['user_id'];
		$payment_id = $_POST['payment_id'];
		$request_amount = $_POST['request_amount'];
		$this->Common_model->reject_cashout_payouts($reject_mgs,$user_id,$payment_id,$request_amount);
	}
	public function Admin_dashboard() {
    $adminId = $this->session->userdata('session_adminId');
    $admininfo = $this->Common_model->getRows('admin',$adminId);
    $pagedata['my_access'] = explode(',',$admininfo['roles']);
    $this->load->view('Admin/admin_dashboard', $pagedata);
	}
	public function mark_read_in_admin(){
		$table = $this->input->post('table');
		$where = $this->input->post('where');
		$run = $this->Common_model->update($table,$where,array('is_admin_read'=>1));
		echo $this->db->last_query();
		echo json_encode(array('status'=>1));
	}

  public function update_admin_note() {
		
		$json['status'] = 0;
		$json['msg'] = 'Something went wrong, try again later.';
		$json['date'] = '';
    
		$id = $this->input->post('id');
		$admin_note = $this->input->post('admin_note');
		
		$update['admin_note'] = $admin_note;
		$update['admin_update'] = date('Y-m-d H:i:s');
		
		$run = $this->Common_model->update('users',array('id'=>$id),$update);
		
		if($run){
			$json['status'] = 1;
			$json['msg'] = 'User note has been update successfully.';
			
			if($admin_note){
				$json['date'] = 'Last updated: '.date('d M Y h:i A',strtotime($update['admin_update']));
			}
		}
		
		echo json_encode($json);
  }

  public function tradesmen_user() {
    // $result['users']=$this->Common_model->get_all_tradesmen();
    $where['type'] = 1;
    $result['users'] = $this->Common_model->fetch_records('users', $where, false, false, 'id,document_updated');
    $this->load->view('Admin/tradesmen_user',$result);
  }

  public function homeowners_users(){
    // $result['users']=$this->Common_model->get_all_homeowner();
    $where['type'] = 2;
    $result['users'] = $this->Common_model->fetch_records('users', $where, false, false, 'id,document_updated');
    $this->load->view('Admin/homeowners_users',$result);
  }

	public function remove_category_image(){
		$id = $this->input->post('id');
		$image = $this->input->post('image');
		
		$run = $this->Common_model->update_data('category',array('cat_id'=>$id),array('cat_image'=>''));
		
		if($run){
			if($image){
				unlink('img/category/'.$image);
			}
			$json['status'] = 1;
			$json['msg'] = 'Image has been removed successfully.';
		} else {
			$json['status'] = 0;
			$json['msg'] = 'Something went wrong, try again later.';
		}
		echo json_encode($json);
	}
	public function getCategoryLists(){
			$data = $row = array();
			$this->load->model('category');
			// Fetch member's records
			$memData = $this->category->getRows($_POST);
			
			//$listing = $this->My_model->get_all_category1('category');
			$newCategory = getParent();
			
			$i = $_POST['start'];
			foreach($memData as $member){
					$i++;
					$main_cate = '';
					if($member->cat_parent && !empty($member->cat_parent)){
						$get_cat=$this->Admin_model->get_parent_cates('category',$member->cat_parent);
						
						$main_cate = (count($get_cat))?$get_cat[0]['cat_name']:'';
						
					}
					
					$img = '';
					
					if($member->cat_image){
					
						$img = '<img id="image-id-'.$member->cat_id .'" src="'.base_url().'img/category/'.$member->cat_image . '" width="80px" height="80px">';
					} 
					
					if($member->show_at_job_search==1){
					
						$show_at_job_search = '<div class="checkbox"><label><input onchange="show_at_job_search(this.value,'.$member->cat_id .');" checked type="checkbox" id="show_at_job_search'.$member->cat_id .'" value="1"></label></div>';
					} else {
						$show_at_job_search = '<div class="checkbox"><label><input onchange="show_at_job_search(this.value,'.$member->cat_id .');" type="checkbox" id="show_at_job_search'.$member->cat_id .'" value="1"></label></div>';
					}

					$action = '<a href="'.base_url($member->slug) .'" target="_blank" class="btn btn-warning btn-xs">View Category</a> ';
					
					$action .= '<a href="'.base_url().'child_category/'.$member->cat_id .'" class="btn btn-info btn-xs">Child Category</a> ';
					
					$action .= '<a href="javascript:void(0);"  onclick="myfunction()" data-toggle="modal" data-target="#edit_category'.$member->cat_id .'" class="btn btn-success btn-xs">Edit</a> ';
					
					$action .= '<a class="btn btn-danger btn-xs" href="'.site_url().'Admin/Admin/delete_cat/'.$member->cat_id .'" onclick="return confirm(\'Are you sure! you want to delete this category?\');">Delete</a> ';

          if($member->is_activate == 1){
            $action .= '<a class="btn btn-danger btn-xs" href="'.site_url().'Admin/Admin/deactivate_category/'.$member->cat_id .'" onclick="return confirm(\'Are you sure! you want to deactivate this category?\');">Deactivate</a> ';
          }else{
            $action .= '<a class="btn btn-danger btn-xs" href="'.site_url().'Admin/Admin/activate_category/'.$member->cat_id .'" onclick="return confirm(\'Are you sure! you want to activate this category?\');">Activate</a> ';
          }
					
					if($member->cat_image){
					
					$action .= '<a id="image-remove-btn-'.$member->cat_id .'" class="btn btn-primary btn-xs" href="" onclick="return remove_category_image('.$member->cat_id .',\''.$member->cat_image .'\');">Delete image</a> ';
					
					}
					
					$action .= '
<div class="modal fade in" id="edit_category'.$member->cat_id .'">
	<div class="modal-body" >
		<div class="modal-dialog">
	 
			<div class="modal-content" id="editMsg_'.$member->cat_id .'">

				<form onsubmit="return edit_category('.$member->cat_id .');" id="edit_category1'.$member->cat_id .'" method="post"  enctype="multipart/form-data">
					<div class="modal-header">
						<div class="editmsg'.$member->cat_id .'" id="editmsg'.$member->cat_id .'"></div>
						 <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">Ã—</span></button>
						 <h4 class="modal-title">Edit Category</h4>
					</div>
					<div class="modal-body">
			
										<div class="form-group">
							<label for="email"> Select category:</label>
							<select type="text" name="cat_parent1" id="cat_parent'.$member->cat_id . '"  class="form-control" onchange="InsertTitle(this ,\'title_ft'.$member->cat_id .'\','.$member->cat_id .')" >
								<option value="">select</option>';
								
								
								
								foreach($newCategory as $newCategoryKey => $newCategoryVal){
									$newCategoryselected = ($newCategoryVal['cat_id']==$member->cat_parent) ? 'selected' : '';
							
								
								$action .= '<optgroup label="'.$newCategoryVal['cat_name'].'">
									<option '.$newCategoryselected.' value="'.$newCategoryVal['cat_id'].'">'.$newCategoryVal['cat_name'].' (Main)</option>';
							
									if(!empty($newCategoryVal['child'])){
										foreach($newCategoryVal['child'] as $childKey => $childVal){
											
											$childCategoryselected = ($childVal['cat_id']==$member->cat_parent) ? 'selected' : '';
											
											$action .= '<option '.$childCategoryselected.' value="'.$childVal['cat_id'].'">'.$childVal['cat_name'].'</option>';
										
										}
										
									}
									
									
								$action .= '</optgroup>';
									
								}
								
							/*foreach($listing as $categorylistss){ 
							
								if($member->cat_parent != 0){
									
									if($categorylistss['cat_id'] != $member->cat_id){ 
										
										$select = ($member->cat_parent == $categorylistss['cat_id'])?'selected':'';
									  $parent = (getCatName($categorylistss['cat_parent'])) ? getCatName($categorylistss['cat_parent'])['cat_name'].'-> ' : '' ;
										$action .= '<option value='.$categorylistss['cat_id'].' '.$select.' >'.$parent.$categorylistss['cat_name'].'</option>';
										
									}
								} else { 
								
									if($categorylistss['cat_id'] != $member->cat_id){ 
									
										$select = ($member->cat_parent == $categorylistss['cat_id'])?'selected':'';
										$parent = (getCatName($categorylistss['cat_parent'])) ? getCatName($categorylistss['cat_parent'])['cat_name'].'-> ' : '' ;
										$action .= '<option value="'.$categorylistss['cat_id'].'" '.$select.' >'.$parent.$categorylistss['cat_name'].'</option>';
										
									} 
								} 
							} */
							$action .= '</select>
						</div>
			<div class="form-group">
				<label for="email"> Category Name:</label>
				<input type="text" name="cat_name1" onkeyup="changeQues(this , '.$member->cat_id.'); create_slug('.$member->cat_id . ',this.value);"  id="cat_name'.$member->cat_id . '"  value="'.$member->cat_name . '" required class="form-control" >
			 </div>
			 <div class="form-group">
				<label for="cat_ques'.$member->cat_id . '">  Category Question:</label>
				<input type="text" name="cat_ques"  id="cat_ques'.$member->cat_id . '"  value="'.$member->cat_ques . '" class="form-control" >
			 </div>
			 <div class="form-group utitle_ft title_ft'.$member->cat_id . '" style="display:none">
				<label for="email">  Category title for find tradesmen page:</label>
				<input type="text" name="title_ft1"  id="title_ft'.$member->cat_id . '"  value="'.$member->title_ft . '"  class="form-control" >
			 </div>
			<div class="form-group">
				<label for="email"> Slug:</label>
				<input type="text" name="slug1" id="slug'.$member->cat_id . '"  value="'.$member->slug . '" required class="form-control" >
				<p class="text-danger">Special characters are not allowed except dash(-) and underscore(_).</p>
			 </div>
			 <div class="form-group">
				<label for="email"> Description:</label>
				<textarea rows="5" placeholder="" name="cat_description1" id="cat_description'.$member->cat_id . '" class="form-control">'.$member->cat_description . '</textarea>
			 </div>
			 <div class="form-group">
				<label for="email"> Meta Title:</label>
				<input type="text" name="meta_title1" id="meta_title'.$member->cat_id . '" class="form-control" value="'.$member->meta_title . '">
			 </div>
			 <div class="form-group">
				<label for="email"> Meta Keywords:</label>
				<input type="text" name="meta_key1" id="meta_key'.$member->cat_id . '" class="form-control" value="'.$member->meta_key . '">
			 </div>
			 <div class="form-group">
				<label for="email"> Meta Description:</label>
				<textarea rows="5" placeholder="" name="meta_description1" id="meta_description'.$member->cat_id . '" class="form-control">'.$member->meta_description . '</textarea>
			 </div>

			 <div class="form-group">
				<label for="email"> Footer Description:</label>
				<textarea rows="5" placeholder="" name="footer_description" id="footer_description'.$member->cat_id . '" class="form-control textarea">'.$member->footer_description . '</textarea>
			 </div>

			 <div class="form-group">
				<label for="email"> Thumbnail Image:</label>
			<input type="file" name="cat_image1" id="cat_image'.$member->cat_id . '" class="form-control">
			<input type="hidden" name="catimage" id="catimage'.$member->cat_id . '" value="'.$member->cat_image . '"></div>

			 
             </div>
               <div class="modal-footer">
				<button type="submit" class="btn btn-info edit_btn'.$member->cat_id . '" >Save</button>
                  <button type="button" class="btn btn-default signup_btn1" data-dismiss="modal">Close</button>
               </div>
			   </form>
            </div>
			
         </div>
      </div>
   </div>
</div>';
					
					$data[] = array($member->cat_id, $member->cat_name, $main_cate, $member->slug, $img, $action);
			}
			
			$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->category->countAll(),
					"recordsFiltered" => $this->category->countFiltered($_POST),
					"data" => $data,
			);
			
			// Output to JSON format
			echo json_encode($output);
	}
	public function category() { 
		//  $result['categorylist']=$this->My_model->alldata('category');
		$result['listing']=$this->Common_model->get_all_category('category');
		
		
		$this->load->view('Admin/category', $result);
		
		
	}

  public function add_category() {
    $json['status'] = 0;
		
		
    $this->form_validation->set_rules('slug','Slug name','trim|required|alpha_dash|is_unique[category.slug]',array('is_unique'=>'This slug already exist'));
    $this->form_validation->set_rules('cat_name','Category Name','required');
    //$this->form_validation->set_rules('cat_description','Category Description','required');
    //$this->form_validation->set_rules('meta_title','Meta Title','required');
    //$this->form_validation->set_rules('meta_description','Meta Description','required');
    /*if(!$_FILES['cat_image']['name']){
    $this->form_validation->set_rules('cat_image','Image','required');	
    }
    */

    if ($this->form_validation->run()==false) {
      $json['msg'] = '<div class="alert alert-danger">'.validation_errors().'</div>';
    }else{
      $file_check = false;
      $fileError = false;
      if($_FILES['cat_image']['name']!=''){
        $file_check = true;
        $config['upload_path']   = './img/category/';
        $config['allowed_types'] = 'gif|jpg|png|jpeg'; 
        $config['max_size']      = 50000;
        $config['min_width']     = 1300;
        $config['min_height']    = 400;
        $config['remove_spaces'] = TRUE;
        $config['encrypt_name'] = TRUE;
        $this->load->library('upload', $config);

        //$this->upload->do_upload('cat_image');
        if($this->upload->do_upload('cat_image')){
          $data = $this->upload->data();
        }else{
          $fileError = true;
        }
      }

      if($fileError){
        $json['msg'] = '<div class="alert alert-danger">'.$this->upload->display_errors().'<div>';
        $json['status'] = 2;
      }else{
        $insert_arr = array(
          'cat_name' => $this->input->post('cat_name'),
          'find_job_title' => $this->input->post('cat_name'),
          'cat_ques' => $this->input->post('cat_ques'),
          'title_ft' => ($this->input->post('title_ft')) ? $this->input->post('title_ft') : $this->input->post('cat_name')  ,
          'slug'=>$this->input->post('slug'),
          'cat_parent'=>$this->input->post('cat_parent'),
          'cat_create' => date('Y-m-d h:i:s'),
          'cat_description'=>$this->input->post('cat_description'),
          'description'=>$this->input->post('description'),
          'meta_title'=>$this->input->post('meta_title'),
          'meta_key2'=>$this->input->post('meta_key2'),
          'meta_key'=>$this->input->post('meta_key'),
          'meta_description'=>$this->input->post('meta_description'),
          'meta_title2'=>$this->input->post('meta_title2'),
          'meta_description2'=>$this->input->post('meta_description2'),
          'footer_description'=>$this->input->post('footer_description'),
          'is_activate' => 1
        );

        if($file_check) $insert_arr['cat_image'] = $data['file_name'];
        $result = $this->My_model->insert_entry('category',$insert_arr);
        if($result){
          $this->session->set_flashdata('success', 'Success! category added successfully.');
          $json['status'] = 1;
        }else{
          $json['msg'] = 'Error! something went wrong.';
          $this->session->set_flashdata('error', 'Error! something went wrong.');
        }
      }

    }
    echo json_encode($json);
  }

  public function update_category($id){
    $json['status'] = 0;
		
		$slug1 = $this->input->post('slug1');
		
		$slug1 = url_title($slug1);
		
    $categories=$this->Common_model->get_single_data('category',array('slug'=>$slug1,'cat_id != '=>$id));
		
		$this->form_validation->set_rules('slug1','Slug name','trim|required|alpha_dash');
		
		if($categories){
			$this->form_validation->set_rules('slug1','Slug name','trim|required|alpha_dash|is_unique[category.slug]',array('is_unique'=>'This slug already exist'));
		}
	 
    if($this->form_validation->run()==false){
      $json['msg'] = '<div class="alert alert-danger">'.validation_errors().'</div>';
    } else {
      $file_check = false;
      $fileError = false;
      if($_FILES['cat_image1']['name']!=''){
        $file_check = true;
        $config['upload_path']   = './img/category/';
        $config['allowed_types'] = 'gif|jpg|png|jpeg'; 
        $config['max_size']      = 50000;
        $config['min_width']     = 1300;
        $config['min_height']    = 400;
        $config['remove_spaces'] = TRUE;
        $config['encrypt_name'] = TRUE;
        $this->load->library('upload', $config);
        $data = $this->upload->data(); 
        if($this->upload->do_upload('cat_image1')){
          $data = $this->upload->data();
        }else{
          $fileError = true;
        }
      }
      if($fileError){
        $json['status'] = 2;
        $json['msg'] = '<div class="alert alert-danger">'.$this->upload->display_errors().'<div>';
        $this->session->set_flashdata('error', $this->upload->display_errors());
      }else{
        $update_array = array(
          'cat_name' => $this->input->post('cat_name1'),
          'cat_ques' => $this->input->post('cat_ques'),
          'title_ft' => ($this->input->post('title_ft1') != '') ? $this->input->post('title_ft1') : $this->input->post('cat_name1')  ,
          'slug'=>$slug1,
          'cat_parent'=>$this->input->post('cat_parent1'),
          'cat_update' => date('Y-m-d h:i:s'),
          'cat_description'=>$this->input->post('cat_description1'),
          //'description'=>$this->input->post('description'),
          'meta_title'=>$this->input->post('meta_title1'),
          'meta_key'=>$this->input->post('meta_key1'),
          'meta_description'=>$this->input->post('meta_description1'),
          'footer_description'=>$this->input->post('footer_description'),
          'child_footer_description1'=>$this->input->post('child_footer_description1'),
          //'meta_title2'=>$this->input->post('meta_title2'),
          //'meta_description2'=>$this->input->post('meta_description2')
        );
        if($file_check){
          $update_array['cat_image'] = $data['file_name'];
        }
        $where_array = array('cat_id'=>$id);
        $result=$this->My_model->update_entry('category', $update_array,$where_array);
        if($result){
          $json['status'] = 1;
          $this->session->set_flashdata('success', 'Success! Category updated successfully.');
        } else {
          $json['status'] = 2;
          $this->session->set_flashdata('error', 'Some error occured.');
        }
      }
    }
    echo json_encode($json);
  }

  public function show_at_job_search($id){
    $json['status'] = 0;

		$status = $this->input->post('status');


		$update_array = array(
			'show_at_job_search' => $this->input->post('status')
		);

		$where_array = array('cat_id'=>$id);
		$result=$this->My_model->update_entry('category', $update_array,$where_array);
        
    
    echo json_encode($json);
  }

public function update_address($uid,$status)
{
		$userdata['u_status_add']=$status;
		
		if($status==0){
			$userdata['u_address']='';
		}
		
		$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($result)
		{
			$users = $this->Common_model->GetColumnName('users',array('id'=>$uid),array('f_name','l_name','email'));
			
			
			$name = $users['f_name'].' '.$users['l_name'];
			$email = $users['email'];
			
			if($status==2){
				$subject = "Your Documents has been verified.";
			
				$html = '<p style="margin:0;padding:10px 0px">Hi '.$users['l_name'].',</p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">Document verified successfully! </p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">Your Address Document has been verified. If youÂ´ve not uploaded all the documents, please do it now to complete your account verification.</p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">View our Tradesperson Help page or contact our customer services if you have any specific questions using our service.</p>';
				
				$insertn1['nt_userId']=$uid;
		
				$insertn1['nt_message']='Your documents have been successfully verified!';
				$insertn1['nt_satus']=0;
				$insertn1['nt_apstatus']=2;
				$insertn1['nt_create']=date('Y-m-d H:i:s');
				$insertn1['nt_update']=date('Y-m-d H:i:s');   
				$insertn1['job_id']=0;
				$insertn1['posted_by']=0;
				$this->Common_model->insert('notification',$insertn1);
				
				$this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-success">Success! Address Document has been verified successfully.</p>');
				
			} else {
        $reason = $this->input->post('reason');

        $insert['nt_userId'] = $uid;
        $insert['nt_message'] = 'Unable to verify your documents. <a href="' .site_url('dashboard?reject_reason=' .$reason) .'">View reason!</a>';
        $insert['nt_satus'] = 0;
        $insert['nt_apstatus'] = 2;
        $insert['nt_create'] = date('Y-m-d H:i:s');
        $insert['nt_update'] = date('Y-m-d H:i:s');   
        $insert['job_id'] = 0;
        $insert['posted_by'] = 0;
        $this->Common_model->insert('notification', $insert);

        $subject = "Your Documents has been rejected.";
        $html = '<p style="margin:0;padding:10px 0px">Hi '.$users['l_name'].',</p>';
        $html .= '<p style="margin:0;padding:10px 0px">Document not accepted! </p>';
        $html .= '<p style="margin:0;padding:10px 0px">Your Address Document has been rejected.</p>';
        $html .= '<p style="margin:0;padding:10px 0px">Reason: '.$reason.'</p>';
        $html .= '<p style="margin:0;padding:10px 0px">View our Tradesperson Help page or contact our customer services if you have any specific questions using our service.</p>';

        $this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-success">Success! Address Document has been rejected successfully.</p>');
			}
			
			
			$this->Common_model->send_mail($email,$subject,$html,null,null,'support');
			
		}
		else 
		{
			$this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-danger">Something went wrong.Please try again later.</p>');
		}
		
		return redirect('tradesmen_user?open_doc='.$uid);
}
public function update_bill($uid,$status)
{
		$userdata['u_status_bill']=$status;
		$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($result)
		{
			$this->session->set_flashdata('success', 'Success! Document has been verified successfully');
		}
		else 
		{
			$this->session->set_flashdata('error', 'Something went wrong.Please try again');
		}
		
		return redirect('tradesmen_user');
}
public function update_photo($uid,$status)
{
	$userdata['u_status_photo_id']=$status;
		$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($result)
		{
			$this->session->set_flashdata('success', 'Success! Document has been verified successfully');
		}
		else 
		{
			$this->session->set_flashdata('error', 'Something went wrong.Please try again');
		}
		
		return redirect('tradesmen_user');
}
public function update_insurance($uid,$status)
{
	$userdata['u_status_insure']=$status;
	if($status==0){
		$userdata['u_insurrance_certi']='';
	}
		$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($result)
		{
			$users = $this->Common_model->GetColumnName('users',array('id'=>$uid),array('f_name','l_name','email'));
			
			
			$name = $users['f_name'].' '.$users['l_name'];
			$email = $users['email'];
			
			if($status==2){
				$subject = "Your Documents has been verified.";
			
				$html = '<p style="margin:0;padding:10px 0px">Hi '.$users['l_name'].',</p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">Document verified successfully! </p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">Your Insurance Document has been verified. If youÂ´ve not uploaded all the documents, please do it now to complete your account verification.</p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">View our Tradesperson Help page or contact our customer services if you have any specific questions using our service.</p>';
				
				$insertn1['nt_userId']=$uid;
		
				$insertn1['nt_message']='Your documents have been successfully verified!';
				$insertn1['nt_satus']=0;
				$insertn1['nt_apstatus']=2;
				$insertn1['nt_create']=date('Y-m-d H:i:s');
				$insertn1['nt_update']=date('Y-m-d H:i:s');   
				$insertn1['job_id']=0;
				$insertn1['posted_by']=0;
				$this->Common_model->insert('notification',$insertn1);
				
				$this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-success">Success! Insurance Document has been verified successfully.</p>');
				
			} else {
        $reason = $this->input->post('reason');

        $insert['nt_userId'] = $uid;
        $insert['nt_message'] = 'Unable to verify your documents. <a href="' .site_url('dashboard?reject_reason=' .$reason) .'">View reason!</a>';
        $insert['nt_satus'] = 0;
        $insert['nt_apstatus'] = 2;
        $insert['nt_create'] = date('Y-m-d H:i:s');
        $insert['nt_update'] = date('Y-m-d H:i:s');   
        $insert['job_id'] = 0;
        $insert['posted_by'] = 0;
        $this->Common_model->insert('notification', $insert);

        $subject = "Your Documents has been rejected.";
        $html = '<p style="margin:0;padding:10px 0px">Hi '.$users['l_name'].',</p>';
        $html .= '<p style="margin:0;padding:10px 0px">Document not accepted! </p>';
        $html .= '<p style="margin:0;padding:10px 0px">Your Insurance Document has been rejected.</p>';
        $html .= '<p style="margin:0;padding:10px 0px">Reason: '.$reason.'</p>';
        $html .= '<p style="margin:0;padding:10px 0px">View our Tradesperson Help page or contact our customer services if you have any specific questions using our service.</p>';

        $this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-success">Success! Insurance Document has been rejected successfully</p>');
			}
			
			
			$this->Common_model->send_mail($email,$subject,$html,null,null,'support');
			
		}
		else 
		{
			$this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-danger">Something went wrong.Please try again later.</p>');
		}
		
		return redirect('tradesmen_user?open_doc='.$uid);
}
public function update_idcard($uid,$status)
{	
	$userdata['u_id_card_status']=$status;
	if($status==0){
		$userdata['u_id_card']='';
	}
	$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($result)
		{
			
			$users = $this->Common_model->GetColumnName('users',array('id'=>$uid),array('f_name','l_name','email'));
			
			
			$name = $users['f_name'].' '.$users['l_name'];
			$email = $users['email'];
			
			if($status==2){
				$subject = "Your Documents has been verified.";
			
				$html = '<p style="margin:0;padding:10px 0px">Hi '.$users['l_name'].',</p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">Document verified successfully! </p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">Your ID Card Document has been verified. If youÂ´ve not uploaded all the documents, please do it now to complete your account verification.</p>';
				
				$html .= '<p style="margin:0;padding:10px 0px">View our Tradesperson Help page or contact our customer services if you have any specific questions using our service.</p>';
				
				$insertn1['nt_userId']=$uid;
		
				$insertn1['nt_message']='Your documents have been successfully verified!';
				$insertn1['nt_satus']=0;
				$insertn1['nt_apstatus']=2;
				$insertn1['nt_create']=date('Y-m-d H:i:s');
				$insertn1['nt_update']=date('Y-m-d H:i:s');   
				$insertn1['job_id']=0;
				$insertn1['posted_by']=0;
				$this->Common_model->insert('notification',$insertn1);
				
				$this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-success">Success! ID Card Document has been verified successfully.</p>');
				
			} else {
        $reason = $this->input->post('reason');

        $insert['nt_userId'] = $uid;
        $insert['nt_message'] = 'Unable to verify your documents. <a href="' .site_url('dashboard?reject_reason=' .$reason) .'">View reason!</a>';
        $insert['nt_satus'] = 0;
        $insert['nt_apstatus'] = 2;
        $insert['nt_create'] = date('Y-m-d H:i:s');
        $insert['nt_update'] = date('Y-m-d H:i:s');   
        $insert['job_id'] = 0;
        $insert['posted_by'] = 0;
        $this->Common_model->insert('notification', $insert);

        $subject = "Your Documents has been rejected.";

        $html = '<p style="margin:0;padding:10px 0px">Hi '.$users['l_name'].',</p>';
        $html .= '<p style="margin:0;padding:10px 0px">Document not accepted! </p>';
        $html .= '<p style="margin:0;padding:10px 0px">Your ID Card Document has been rejected.</p>';
        $html .= '<p style="margin:0;padding:10px 0px">Reason: '.$reason.'</p>';
        $html .= '<p style="margin:0;padding:10px 0px">View our Tradesperson Help page or contact our customer services if you have any specific questions using our service.</p>';

        $this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-success">Success! ID Card Document has been rejected successfully.</p>');
			}
			
			$this->Common_model->send_mail($email,$subject,$html,null,null,'support');
			
			
		}
		else 
		{
			$this->session->set_flashdata('my_msg_doc'.$uid, '<p class="alert alert-danger">Something went wrong.Please try again later.</p>');
		}
		
		return redirect('tradesmen_user?open_doc='.$uid);
	
}

public function send_direct_mail($id)
{	
	$users = $this->Common_model->GetColumnName('users',array('id'=>$id),array('f_name','l_name','email','type'));
	
	$subject = $this->input->post('subject');
	$message = $this->input->post('message');

	$html = '<p style="margin:0;padding:10px 0px">Hi '.$users['f_name'].',</p>';

	$html .= '<p style="margin:0;padding:10px 0px">'.$message.'</p>';

	$html .= '<p style="margin:0;padding:10px 0px">View our Tradesperson Help page or contact our customer services if you have any specific questions using our service.</p>';

	$this->session->set_flashdata('my_msg', '<p class="alert alert-success">Success! Message has been sent successfully.</p>');


	$this->Common_model->send_mail($users['email'],$subject,$html,null,null,'support');
			
		
		if($user['type']==1){
			return redirect('tradesmen_user');
		} else {
			return redirect('homeowners_users');
		}
}

  public function delete_cat($id) {
		$session_user=$this->session->userdata('session_userId');
			$update_array = array(
				'is_delete'=>1,
				'slug'=>''
		);
			$where_array=array('cat_id'=>$id);  
		$result=$this->My_model->update_entry('category',$update_array,$where_array);  
		if($result)
		{
			$this->session->set_flashdata('success', 'Success! Category has been deleted Successfully.');
			
		}    
		else     
		{
			$this->session->set_flashdata('error', 'Error! Something went wrong, Try again.');
			
		}
		return redirect('category');
	}
		public function Blockuser1($uid,$status) {
		$userdata['status']=$status;
			$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($status)
		{
			$vars="Blocked";
		}
		else 
		{
			$vars="Unblocked";
		}
		$this->session->set_flashdata('success', 'Success! User has been '.$vars.' Successfully');
		return redirect('homeowners_users');
	
	}
	public function mark_read($uid,$status,$page)
	{
			$userdata['status']=$status;
			$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('contact_request',$userdata,$where_array);  
		return redirect($page);
	}
		public function Blockuser($uid,$status) {
		$userdata['status']=$status;
		$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($status)
		{
			$vars="Blocked";
		}
		else 
		{
			$vars="Unblocked";
		}
		
		$this->session->set_flashdata('success', 'Success! User has been '.$vars.' Successfully');
		
		$users = $this->Common_model->GetColumnName('users',array('id'=>$uid),array('type'));
		
		if($users['type']==1){
			return redirect('tradesmen_user');
		} else {
			return redirect('homeowners_users');
		}
	
	}
		public function review_invitation_status($uid,$status) {
		$userdata['review_invitation_status']=$status;
			$where_array=array('id'=>$uid);  
		 
		$result=$this->My_model->update_entry('users',$userdata,$where_array);  
		if($status)
		{
			$vars="Blocked";
		}
		else 
		{
			$vars="Unblocked";
		}
		$this->session->set_flashdata('success', 'Success! Review invitation has been '.$vars.' Successfully');
		return redirect('tradesmen_user');
	
	}
	public function delete_user($uid,$redirect='tradesmen_user') { 
		 
		$result=$this->Common_model->delete(array('id'=>$uid),'users');  
		
		if($result) {
			
			$this->Common_model->delete(array('up_user'=>$uid),'user_plans');
			
			$this->session->set_flashdata('my_msg', '<div class="alert alert-success">User has been deleted successfully.</div>');
		} else {
			$this->session->set_flashdata('my_msg', '<div class="alert alert-danger">Something went wrong, try again later.</div>');
		}
		
		return redirect($redirect);
	
	}
	public function accept_withdraw($uid,$status,$amount,$userid)
	{
		$userdata['wd_status']=$status;
		$where_array=array('wd_id'=>$uid); 
		$result=$this->My_model->update_entry('tbl_withdrawal',$userdata,$where_array);
		
		$data=$this->Common_model->get_single_data('tbl_withdrawal',array('wd_id'=>$uid));
		
		$get_users=$this->Common_model->get_single_data('users',array('id'=>$userid));

		if($data['wd_payment_type']==2){
			$type = 'bank';
		} else {
			$type = 'paypal';
		}
		
		$subject = "You recently requested a withdrawal of funds to your bank account"; 
		$html = '<p style="margin:0;font-size:20px;padding-bottom:5px;color:#2875d7">Withdrawal request processed!</p>';
		$html .= '<p style="margin:0;padding:20px 0px">Hi '.$get_users['f_name'].',</p>';
		$html .= '<p style="margin:0;padding:20px 0px">The request to withdraw money from your Tradespeoplehub account to your '.$type.' account is processed and the money paid. </p>';
		$html .= '<p style="margin:0;padding:5px 0px">Requested withdrawal amount: Â£'.$data['wd_amount'].'</p>';
		
		if($data['wd_payment_type']==2){
			$html .= '<p style="margin:0;padding:5px 0px">Bank name: '.$data['wd_bank'].'</p>';
			$html .= '<p style="margin:0;padding:5px 0px">Sort code: '.$data['wd_ifsc_code'].'</p>';
			$html .= '<p style="margin:0;padding:5px 0px">Bank account: '.$data['wd_account'].'</p>';
		} else {
			$html .= '<p style="margin:0;padding:5px 0px">Paypal username: '.$data['wd_pay_email'].'</p>';
		}
		
		$html .= '<p style="margin:0;padding:5px 0px">Transaction ID: '.md5($uid).'</p>';
		$html .= '<p style="margin:0;padding:20px 0px">It could take 1-2 business days for the money to appear in your bank account, depending on your bank. If it takes longer, please contact your bank.</p>';
		$html .= '<p style="margin:0;padding:20px 0px">View our Tradespeople Help page or contact our customer services if you have any specific questions using our service.</p>';
				
		$runsss=$this->Common_model->send_mail($get_users['email'],$subject,$html,null,null,'support');

		$insertn['nt_userId']=$userid;

		
		$insertn['nt_message']='Â£'.$amount.'  withdrawal processed & credited to your '.$type.' account.';
		
		$insertn['nt_satus']=0;
		$insertn['nt_create']=date('Y-m-d H:i:s');
		$insertn['nt_update']=date('Y-m-d H:i:s');
		$insertn['nt_apstatus']=4;
		$run2 = $this->Common_model->insert('notification',$insertn);



		$this->session->set_flashdata('success', 'Success! Withdrawal Request Accepted Successfully');
		return redirect('withdrawal_history');
	}
	function reject_post() {
		$wd_id=$this->input->post('wd_id');
		$amount=$this->input->post('wd_amount');
		$userid=$this->input->post('wd_userid');
		$userdata['wd_status']=2;
		$userdata['wd_reason']=$this->input->post('reject_mgs');
		$where_array=array('wd_id'=>$wd_id); 
		$result=$this->My_model->update_entry('tbl_withdrawal',$userdata,$where_array);
		$get_users=$this->Common_model->get_single_data('users',array('id'=>$userid)); 
		//$userdata1['u_wallet']=$get_users['u_wallet']+$amount;
		$userdata1['withdrawable_balance']=$get_users['withdrawable_balance']+$amount;
		$where_array1=array('id'=>$userid);
		$results=$this->My_model->update_entry('users',$userdata1,$where_array1);
		$insert['tr_userid'] = $userid;
		$insert['tr_message'] = 'Your withdrawal request has been cancelled';
		$insert['tr_amount'] = $amount;
		$insert['tr_type'] = 1;
		$insert['tr_status'] = 1;
			
		$run2 = $this->Common_model->insert('transactions',$insert);
		$reason=$this->input->post('reject_mgs');

		$subject = "Withdrawal Request Decline!"; 
		
		$html = '<p style="margin:0;font-size:20px;padding-bottom:5px;color:#2875d7">Withdrawal request Decline!</p>';
		$html .= '<p style="margin:0;padding:20px 0px">Hi '.$get_users['f_name'].',</p>';
		$html .= '<p style="margin:0;padding:20px 0px">Unfortunately, weÂ´re unable to process the request to withdraw money from your Tradespeoplehub account to your bank account.</p>';
		$html .= '<p style="margin:0;padding:5px 0px">Requested withdrawal amount: Â£'.$amount.'</p>';
		$html .= '<p style="margin:0;padding:5px 0px">Transaction ID: '.md5($wd_id).'</p>';
		$html .= '<p style="margin:0;padding:5px 0px">Decline reason: '.$userdata['wd_reason'].'</p>';
		$html .= '<p style="margin:0;padding:20px 0px">View our Tradespeople Help page or contact our customer services if you have any specific questions using our service.</p>';
				
		$runsss=$this->Common_model->send_mail($get_users['email'],$subject,$html,null,null,'support');

		$insertn['nt_userId']=$userid;

		$insertn['nt_message']='Your withdrawal request was declined. <a href="'.site_url().'fund-withdrawal?show_reason='.$wd_id.'">View reason.</a>';
		$insertn['nt_satus']=0;
		$insertn['nt_create']=date('Y-m-d H:i:s');
		$insertn['nt_update']=date('Y-m-d H:i:s');
		$insertn['nt_apstatus']=4;
		$run2 = $this->Common_model->insert('notification',$insertn);

		if($results)
		{
			$json['status']=1;
			$this->session->set_flashdata('success', 'Success! Withdrawal Request Rejected Successfully');
		}
		
		echo json_encode($json);

	}
	public function child_category($id)
	{
		$result['category']=$this->My_model->get_all_category1('category');
		if($result['category']==''){
			$result['category']  =array();     
		}
		$result['listing']=$this->Admin_model->get_parent_cat($id);
	
		if($result['listing']==''){
			$result['listing']  =array();     
		}
		
		$this->load->view('Admin/child_category',$result);
		
	}
	public function user_rewards()
	{
		$result['rewards']=$this->Admin_model->get_user_rewards();
				
		$this->load->view('Admin/rewards',$result);
		
	}

		public function Manage_profile() {
		$adminId=$this->session->userdata('session_adminId');
		$results1['admininfo']=$this->Common_model->getRows('admin',$adminId);  
		$this->load->view('Admin/include/header',$results1);
		$results=[];
		$this->load->view('Admin/profile',$results);
		
	}
		public function update_profile() {
		$adminId=$this->session->userdata('session_adminId');
		$userdata['username']=$this->input->post('Username');
		$userdata['email']=$this->input->post('email');
		$where_array=array('id'=>$adminId); 

		$check = $this->Common_model->get_single_data('admin',array('email'=>$userdata['email'],'id != '=>$adminId));
		
		if($check){
			$this->session->set_flashdata('error', 'Error! This email address already used.');
		} else {
		 
			$result=$this->My_model->update_entry('admin',$userdata,$where_array);  
			if($result) {
				$this->session->set_flashdata('success', 'Success! Profile Updated Successfully');
			} else {
				$this->session->set_flashdata('error', 'Error! Something went wrong, Try again.');
			}
		}
		
		return redirect('Admin/Manage_profile');
	}
		public function dochange_password() {
		$session_user=$this->session->userdata('session_adminId');
		$where_array=array('id'=>$session_user);  
		$data=$this->Common_model->getRows('admin',$session_user);
		if($data['password']==$this->input->post('oldpassword'))
		{
			$userdata['password']=$this->input->post('password');
			$result=$this->My_model->update_entry('admin',$userdata,$where_array);
			$this->session->set_flashdata('success1', 'Success! Password has been changed successfully.');
			$res['result']=1;
			
		}
		else 
		{
			$res['result']=0;
		}
		echo json_encode($res);
	}
		public function skills_management() {	 
		$result['listing']=$this->My_model->alldata('tbl_skills');
		if($result['listing']==''){
			$result['listing']  =array();     
		}
		
		$this->load->view('Admin/skills_page',$result);
		
	}
	public function add_skills()
	{
		$today= date('Y-m-d h:i:s');	
		$insert_arr = array(
						'skills' => $this->input->post('skills')
					);  
					
		$result=$this->My_model->insert_entry('tbl_skills',$insert_arr);
		if($result){		
			$this->session->set_flashdata('success', 'Success!  send successfully.');	
		 }else {
			$this->session->set_flashdata('error', 'Error!  something went wrong.');
		 }
		 return redirect('skills_management');
	}
			public function update_skill($id) {	
		$update_array = array(
			'skills' => $this->input->post('skills')
		);
		$where_array=array('id'=>$id);  
		 
		$result=$this->My_model->update_entry('tbl_skills',$update_array,$where_array);   
		if($result){		
			$this->session->set_flashdata('success', 'Success!  Skill has been edited successfully.');	
		}else {
			$this->session->set_flashdata('error', 'Error!  Skill went wrong.');
		}
		return redirect('skills_management');    
	}
	public function delete_skill($id) {
		$session_user=$this->session->userdata('session_userId');
		$result=$this->Common_model->delete(array('id'=>$id),'tbl_skills'); 
		if($result)
		{
			$this->session->set_flashdata('success', 'Success! Skill has been deleted Successfully.');
			
		}    
		else     
		{
			$this->session->set_flashdata('error', 'Error! Something went wrong, Try again.');
			
		}
		return redirect('skills_management');
	}
	function business_types()
	{
		$result['listing']=$this->My_model->alldata('business_types');
		if($result['listing']==''){
			$result['listing']  =array();     
		}
		
		$this->load->view('Admin/business_types',$result);
		

	}
	function add_type()
	{
		$insert_arr = array(
						'business_name' => $this->input->post('business_name')
					);  
					
		$result=$this->My_model->insert_entry('business_types',$insert_arr);
		if($result){		
			$this->session->set_flashdata('success', 'Success!  send successfully.');	
		 }else {
			$this->session->set_flashdata('error', 'Error!  something went wrong.');
		 }
		 return redirect('business_types');

	}
		public function update_type($id) {	
		$update_array = array(
			'business_name' => $this->input->post('business_name')
					);
		$where_array=array('id'=>$id);  
		 
		$result=$this->My_model->update_entry('business_types',$update_array,$where_array);   
		if($result){		
			$this->session->set_flashdata('success', 'Success!  Business Type has been edited successfully.');	
		}else {
			$this->session->set_flashdata('error', 'Error!  Something went wrong.');
		}
		return redirect('business_types');    
	}
		public function delete_type($id) {
		$session_user=$this->session->userdata('session_userId');
		$result=$this->Common_model->delete(array('id'=>$id),'business_types');
		if($result)
		{
			$this->session->set_flashdata('success', 'Success! Type has been deleted Successfully.');
			
		}    
		else     
		{
			$this->session->set_flashdata('error', 'Error! Something went wrong, Try again.');
			
		}
		return redirect('business_types');
	}

	function logout() {
		$this->session->unset_userdata('session_adminId');
		return redirect('Admin');
	}  
	function contact_requests()
	{
			$result['listing']=$this->My_model->alldata('contact_request');
		if($result['listing']==''){
			$result['listing']  =array();     
		}
		
		$this->load->view('Admin/contacts',$result);
		
	}
	function delete_request($id,$redirect='Admin_dashboard')
	{
		$result=$this->Common_model->delete(array('id'=>$id),'contact_request');
		if($result)
		{
			$this->session->set_flashdata('success', 'Success! Contact Request has been deleted Successfully.');
			
		}    
		else     
		{
			$this->session->set_flashdata('error', 'Error! Something went wrong, Try again.');
			
		}
		return redirect($redirect);
	}
	public function edit_profile($id)
	{
		$results['userinfo']=$this->Common_model->getRows('users',$id);  
		$results['country']=$this->Common_model->newgetRows('tbl_region',array('is_delete'=>0));
		$this->load->view('Admin/edit_page',$results);
		
	}
	public function tradesmen_contacts()
	{
		$result['listing']=$this->Admin_model->get_trades_request();
		if($result['listing']==''){
			$result['listing']  =array();     
		}
		
		$this->load->view('Admin/contacts',$result);
		
	}
	public function homeowners_contacts()
	{
			$result['listing1']=$this->Admin_model->get_home_request();
		if($result['listing1']==''){
			$result['listing1']  =array();     
		}
		
		$this->load->view('Admin/contacts',$result);
		
	}

public function update_user_profile(){
		$u_type = $this->input->post('type');
		$user_id = $this->input->post('id');
		
	 	$user_profile=$this->Common_model->get_data('users',array('phone_no'=>$this->input->post('phone_no')));
		
		$userprofile=$this->Common_model->get_single_data('users',array('phone_no'=>$this->input->post('phone_no')));
		
		$this->form_validation->set_rules('f_name','First Name','required');
		$this->form_validation->set_rules('l_name','Last Name','required');
		$this->form_validation->set_rules('country','Country','required');

		$this->form_validation->set_rules('locality','City','required');
		$this->form_validation->set_rules('e_address','Address','required');

		if(count($user_profile)>=0 && $userprofile['id']!=$user_id) {
	 		$this->form_validation->set_rules('phone_no','Phone number','required|integer|is_unique[users.phone_no]',array('is_unique'=>'This phone number is already registered'));
	 	} else {
	 		$this->form_validation->set_rules('phone_no','Phone number','required|integer');
	 	}
			
		$this->form_validation->set_rules('postal_code','Postal Code','required');
			
		if($u_type==1){
			$this->form_validation->set_rules('trading_name','Trading Name','required');
		}
		if ($this->form_validation->run()==false) 
		{
			
			$this->session->set_flashdata('msg','<div class="alert alert-danger">' .validation_errors() . '</div>');
		} else {
			if($_FILES['profile']['name']){ 
				$config['upload_path']="img/profile";
				$config['allowed_types'] = 'jpeg|gif|jpg|png';
				$config['encrypt_name']=true;
				$this->load->library("upload",$config);
				if ($this->upload->do_upload('profile')) {
					$profile=$this->upload->data("file_name");
					$insert['profile'] = $profile;
				} 
			}
			
			if($userprofile['phone_no']!=$this->input->post('phone_no')){
				$insert['is_phone_verified'] = 0;
			}
				
			$insert['f_name'] = $this->input->post('f_name');
			$insert['l_name'] = $this->input->post('l_name');
			$insert['county'] = $this->input->post('country');
			$insert['city'] = $this->input->post('locality');
			$insert['postal_code'] = str_replace(" ","",$this->input->post('postal_code'));
			if($u_type==1){
				$insert['about_business'] = $this->input->post('about_business');
				$insert['category'] = implode(',', $this->input->post('category'));
				$insert['subcategory'] = implode(',', $this->input->post('subcategory'));
				$insert['trading_name'] = $this->input->post('trading_name');
				//$insert['work_history'] = $this->input->post('work_history');
				$insert['qualification'] = $this->input->post('qualification');
			}
			$insert['max_distance'] = $this->input->post('distance');
			$insert['phone_no'] = $this->input->post('phone_no');
			$insert['e_address'] = $this->input->post('e_address');
			$insert['primary_lang'] = $this->input->post('userLanguage');
			$insert['secondary_lang'] = $this->input->post('second_lang');
			$insert['hourly_rate']=$this->input->post('hourly_rate');

			$run = $this->Common_model->update('users',array('id'=>$user_id),$insert);

			if($run){
				$this->session->set_flashdata('msg','<div class="alert alert-success">Your profile has been updated successfully.</div>');
			} else {
				$this->session->set_flashdata('msg','<div class="alert alert-danger">We have not found any changes.</div>');
			}
		}
			
		redirect('edit-profile/'.$user_id);
}
function send_mail($id,$page)
{
	$subject = $this->input->post('subject');
	$message=$this->input->post('message');
	$f_name=$this->input->post('first_name');
	$l_name=$this->input->post('last_name');
	$email=$this->input->post('email');
				$contant= 'Hi '.$f_name.', <br><br>';
				$contant.=$message;	
				$send = $this->Common_model->send_mail($email,$subject,$contant);
				if($send)
		{
			$this->session->set_flashdata('success', 'Success! Request has been replied successfully.');
			
		}    
		else     
		{
			$this->session->set_flashdata('error', 'Error! Something went wrong, Try again.');
			
		}
		return redirect($page);
} 
function homepage_content()
{
	$result['listing']=$this->My_model->alldata('home_content');
		
		$this->load->view('Admin/home_page',$result);
		
}  
function affiliaters()
{
	
		$data['get_marketers'] = $this->Common_model->get_marketers();
		$this->load->view('Admin/affiliaters',$data);
		
}
function payouts()
{ 
		$data['marketer_payouts'] = $this->Common_model->get_marketer_payouts();
		$this->load->view('Admin/payouts',$data);
		
}
function refferals()
{
	
		$data['get_reff_homeowner'] = $this->Common_model->get_reff_homeowner();
		$data['get_reff_tradsman'] = $this->Common_model->get_reff_tradsman();
		$this->load->view('Admin/refferals',$data);
		
}
function marketer_refferals()
{
	
		
		$this->load->view('Admin/marketer_refferals');
		
}
function referral_payouts()
{
	
		
		$this->load->view('Admin/referral_payouts');
		
}
function admin_settings()
{
	
		$data['settings'] =  $this->Common_model->get_admin_settings();
		$this->load->view('Admin/admin_settings',$data);
		
}

  function cost_guide_management(){
    $costGuides = $this->My_model->alldata_custom('cost_guides', array('is_deleted !=' => 1));
    $data['costGuides'] = $costGuides->result_array();
    $this->load->view('Admin/cost_guide_management', $data);
  }

  function addCostGuide(){
		
		$this->form_validation->set_rules('slug','Slug name','trim|required|alpha_dash|is_unique[cost_guides.slug]',array('is_unique'=>'This slug already exist'));
		
		if ($this->form_validation->run()==false){
				$json['status'] = 0;
		   $json['msg'] = '<div class="alert alert-danger">'.validation_errors().'</div>';
		}else{
		
			$insertData['title'] = $this->input->post('title');
			$insertData['description'] = $this->input->post('description');
			$insertData['price'] = $this->input->post('price');
			$insertData['slug'] = $this->input->post('slug');
			$insertData['meta_title'] = $this->input->post('meta_title');
			$insertData['meta_desc'] = $this->input->post('meta_desc');
			$insertData['meta_key'] = $this->input->post('meta_key');
			$insertData['price2'] = $this->input->post('price2');
			$insertData['created_at'] = date("Y-m-d H:i:s");
			$insertData['updated_at'] = date("Y-m-d H:i:s");
			if($_FILES['image']['name']){
				$config['upload_path']   = './img/costguide/';
				$config['allowed_types'] = 'gif|jpg|png|jpeg';  
				// $config['max_width'] = 1920;
				// $config['min_width'] = 1348;
				// $config['max_height'] = 750;
				// $config['min_height'] = 540;
				$config['encrypt_name'] = TRUE;
				$this->load->library('upload', $config);
				if($this->upload->do_upload('image')){
					$data = $this->upload->data();
					$insertData['image'] = $data['file_name'];
				}
			}
			$result = $this->My_model->insert_entry('cost_guides',$insertData);
			if($result){
				$json['status'] = 1;
				$this->session->set_flashdata('success', 'Success! Cost guide successfully added.');
			}else{
				$json['status'] = 0;
				$json['msg'] = '<div class="alert alert-danger"> Error to add Cost Guide!! <div>';
			}
		}
    echo json_encode($json);
  }
  
  function get_cost_guide(){
    $id = $this->input->post('id');
    $costGuide = $this->Common_model->get_single_data('cost_guides',array('id' => $id));

    $output = '';
    if(!empty($costGuide)){
      $output = '
			<div class="mmss"></div>
			<div class="form-group">
        <label for="title">Title:</label>
        <input type="text" name="title" id="title'.$costGuide['id'].'" onkeyup="create_slug('.$costGuide['id'].',this.value);" value="' .$costGuide['title'] .'" class="form-control" required>
      </div>
			<div class="form-group">
				<label for="email"> Slug:</label>
				<input type="text" name="slug" id="slug'.$costGuide['id'].'" value="'.$costGuide['slug'].'" class="form-control" required>
			 </div>
      <div class="form-group">
        <label for="price">Price:</label>
        <input type="number" name="price" id="price_1" min="0.1" step="0.1" class="form-control" value="' .$costGuide['price'] .'" required>
      </div>
			
				<div class="form-group">
					<label for="price">Price 2:</label>
					<input type="number" name="price2" id="price2_1" id="price2" min="0.1" step="0.1" class="form-control" value="' .$costGuide['price2'] .'" required>
				</div>
      <div class="form-group">
        <label for="description">Description:</label>
        <textarea name="description" class="form-control textarea" >' .$costGuide['description'] .'</textarea>
        <p class="text-danger" id="editDescriptionError">This field is required.</p>
      </div>
			<div class="form-group">
				<label for="email"> Meta Title:</label>
				<input type="text" name="meta_title" class="form-control" value="' .$costGuide['meta_title'] .'">
			</div>
			<div class="form-group">
				<label for="email"> Meta keywords:</label>
				<input type="text" name="meta_key" class="form-control" value="' .$costGuide['meta_key'] .'">
			</div>
			<div class="form-group">
				<label for="meta_desc">Meta Description:</label>
				<textarea name="meta_desc" class="form-control">' .$costGuide['meta_desc'] .'</textarea>
			</div>
      <input type="hidden" name="id" value="' .$costGuide['id'] .'" />
      <div class="form-group">
        <label for="image">Image:</label>
        <img class="cost-image1" width="200" src="img/costguide/' .$costGuide['image'] .'" id="oldImage">
        <img class="cost-image" id="newImage" style="display:none;">
        <input type="file" name="image" class="form-control" accept="image/*"  onchange="readURL(this);">
      </div>';
    }
    echo json_encode(array('output' => $output, 'description' => $costGuide['description']));
  }
  
  function update_cost_guide(){
    $id = $this->input->post('id');
		
		$slug = $this->input->post('slug');
		
		$check = $this->Common_model->get_data_count('cost_guides',array('id != '=>$id,'slug'=>$slug),'id');
		
		if($check > 0){
			$this->form_validation->set_rules('slug','Slug name','trim|required|alpha_dash|is_unique[cost_guides.slug]',array('is_unique'=>'This slug already exist'));
		} else {
			$this->form_validation->set_rules('slug','slug','trim|required|alpha_dash');
		}
		
		if ($this->form_validation->run()==false){
			$json['status'] = 0;
			$json['msg'] = '<div class="alert alert-danger">'.validation_errors().'</div>';
		}else{
		
		
			$where = [
				'id' => $id,
			];
			$costGuide = $this->Common_model->get_single_data('cost_guides', array('id' => $id));

			$update['title'] = $this->input->post('title');
			$update['description'] = $this->input->post('description');
			$update['price'] = $this->input->post('price');
			$update['slug'] = $this->input->post('slug');
			$update['meta_title'] = $this->input->post('meta_title');
			$update['meta_key'] = $this->input->post('meta_key');
			$update['meta_desc'] = $this->input->post('meta_desc');
			$update['price2'] = $this->input->post('price2');
			$update['updated_at'] = date("Y-m-d H:i:s");

			if($_FILES['image']['name']){
				$config['upload_path']   = './img/costguide/';
				$config['allowed_types'] = 'gif|jpg|png|jpeg';  
				$config['encrypt_name'] = TRUE;
				$this->load->library('upload', $config);
				if($this->upload->do_upload('image')){
					unlink('img/costguide/'.$costGuide['image']);
					$data = $this->upload->data();
					$update['image'] = $data['file_name'];
				}
			}

			$result = $this->My_model->update_entry('cost_guides',$update, $where);
			if($result){
				$json['status'] = 1;
				$this->session->set_flashdata('success', 'Success! Cost guide successfully updated.');
			}else{
				$json['status'] = 0;
				$json['msg'] = '<div class="alert alert-danger"> Error updating Cost Guide!! <div>';
			}
		}
    echo json_encode($json);
  }

  function delete_cost_guide(){
    $id = $this->input->post('id');
    $update['is_deleted'] = 1;
    $update['updated_at'] = date("Y-m-d H:i:s");
    $result = $this->My_model->update_entry('cost_guides',$update, array('id' => $id));
    $response['status'] = ($result) ? 1 : 0;
    echo json_encode($response);
  }

function add_content()
{
				$insert_arr = array(
						'meta_title' => $this->input->post('meta_title'),
						'meta_description'=>$this->input->post('meta_description')
					); 
				
		$result=$this->My_model->insert_entry('home_content',$insert_arr);
		if($result)
		{
			$this->session->set_flashdata('success', 'Success! Content has been added successfully.');
		}
		else
		{
			$this->session->set_flashdata('error', 'Error! Something went wrong, Try again.');

		}
		redirect('homepage_content');
}
	public function update_content($id) 
	{
		$update_array = array(
			'meta_title' => $this->input->post('meta_title'),
			'meta_key' => $this->input->post('meta_key'),
			'meta_description'=>$this->input->post('meta_description')
		);

		$where_array=array('id'=>$id);  
		 
		$result1=$this->My_model->update_entry('home_content',$update_array,$where_array);
		if($result1){	
			$this->session->set_flashdata('success', 'Success!  Home Content has been updated successfully.');	
		}else {
			$this->session->set_flashdata('error', 'We have not found any changes');
		}
		return redirect('homepage_content');    
	}
	public function update_script($id)
	{
		$update_array = array(
			'header_script' => $this->input->post('header_script'),
			'body_script'=>$this->input->post('body_script'),
			//'footer_script'=>$this->input->post('footer_script')
		);

		$where_array=array('id'=>$id);  
		 
		$result1=$this->My_model->update_entry('home_content',$update_array,$where_array);
		if($result1){	
			$this->session->set_flashdata('success', 'Success!  Script has been updated successfully.');	
		}else {
			$this->session->set_flashdata('error', 'We have not found any changes');
		}
		return redirect('homepage_content');   
	}

	public function update_blog($id)
	{
		$update_array = array(
			'blog_title' => $this->input->post('blog_title'),
			'blog_description'=>$this->input->post('blog_description'),
			'blog_footer_title'=>$this->input->post('blog_footer_title'),
			'blog_footer_key'=>$this->input->post('blog_footer_key'),
			'blog_footer_description'=>$this->input->post('blog_footer_description')
		);

		$where_array=array('id'=>$id);  
		 
		$result1=$this->My_model->update_entry('home_content',$update_array,$where_array);   
		if($result1){	
			$this->session->set_flashdata('success', 'Success!  Blog details has been updated successfully.');	
		}else {
			$this->session->set_flashdata('error', 'We have not found any changes');
		}
		return redirect('homepage_content');

	}


	public function update_cost($id)
	{
		$update_array = array(
			'cost_title' => $this->input->post('cost_title'),
			'cost_description'=>$this->input->post('cost_description'),
			'cost_meta_title'=>$this->input->post('cost_meta_title'),
			'cost_meta_key'=>$this->input->post('cost_meta_key'),
			'cost_meta_description'=>$this->input->post('cost_meta_description')
		);

		$where_array=array('id'=>$id);  
		 
		$result1=$this->My_model->update_entry('home_content',$update_array,$where_array);   
		if($result1){	
			$this->session->set_flashdata('success', 'Success!  Cost details has been updated successfully.');	
		}else {
			$this->session->set_flashdata('error', 'We have not found any changes');
		}
		return redirect('homepage_content');

	}


	public function transactions(){
		$result['trasactions']=$this->Common_model->get_all_data('transactions','','tr_id');
		
		$this->load->view('Admin/transactions',$result);
		
	}

	public function user_plans(){
		$result['user_plans']=$this->Common_model->get_all_data('user_plans','up_transId!=1','up_update');
		
		$this->load->view('Admin/user_plans',$result);
		
	}

	public function user_jobs(){
		$result['user_jobs']=$this->Common_model->get_all_data('tbl_jobs',array('is_delete!='=>1),'job_id');
	
		$this->load->view('Admin/user_jobs',$result);
		
	}

	public function user_bid_jobs(){
		$result['bid_user_jobs']=$this->Common_model->get_all_data('tbl_jobpost_bids',"(select count(id) from tbl_jobs where tbl_jobs.job_id = tbl_jobpost_bids.job_id) > 0",'id');
		
		$this->load->view('Admin/user_bid_jobs',$result);
		
	}


	public  function package_status(){
	  $json['result']=0;
	  $id = $this->input->post('id').'</br>';
	  $status = $this->input->post('status');
	  $update['status']=$status;
	  $update_data=$this->Common_model->updates('tbl_package','id',$id,$update);
	  if($update_data){
        $json['result']=1;
	  }
	  echo json_encode($json);
	}   
	public function payment_setting()
	{
			$data['setting']=$this->Common_model->get_all_data('admin');
		
		$this->load->view('Admin/payment_setting',$data);
		
	}
	  public function update_settings(){

	  		$min_amount_cashout_m=$this->input->post('min_amount_cashout_m');	
	  		$min_quotes_received_m=$this->input->post('min_quotes_received_m');	
	  		$min_quotes_approved_m=$this->input->post('min_quotes_approved_m');	
	  		$comission_ref_hm=$this->input->post('comission_ref_hm');	
	  		$comission_ref_tm=$this->input->post('comission_ref_tm');	
	  		$min_amount_cashout_h=$this->input->post('min_amount_cashout_h');	
	  		$min_quotes_received_h=$this->input->post('min_quotes_received_h');	
	  		$min_quotes_approved_h=$this->input->post('min_quotes_approved_h');	
	  		$comission_ref_hh=$this->input->post('comission_ref_hh');	
	  		$comission_ref_th1=$this->input->post('comission_ref_th1');	
	  		$min_quotes_received_t=$this->input->post('min_quotes_received_t');	
	  		$min_quotes_approved_t=$this->input->post('min_quotes_approved_t');	
	  		$comission_ref_th=$this->input->post('comission_ref_th');	
	  		$comission_ref_tt=$this->input->post('comission_ref_tt');	
	  		$payment_method=$this->input->post('payment_method');
	  		$banner=$this->input->post('banner');
	  		$participating_bid=$this->input->post('participating_bid');
	  		$marketer_homeowner=$this->input->post('marketer_homeowner[]');
	  		$marketer_tradsman=$this->input->post('marketer_tradsman[]');
	  		$homeowner_homeowner=$this->input->post('homeowner_homeowner[]');
	  		$homeowner_tradsman=$this->input->post('homeowner_tradsman[]');
	  		$tradsman_homeowner=$this->input->post('tradsman_homeowner[]');
	  		$tradsman_tradsman=$this->input->post('tradsman_tradsman[]');
	  		if($marketer_homeowner != ''){
	  			$marketer_homeowner_f = implode(",",$marketer_homeowner);
	  		}if($marketer_tradsman != ''){
	  			$marketer_tradsman_f = implode(",",$marketer_tradsman);
	  		}if($homeowner_homeowner != ''){
	  			$homeowner_homeowner_f = implode(",",$homeowner_homeowner);
	  		}if($homeowner_tradsman != ''){
	  			$homeowner_tradsman_f = implode(",",$homeowner_tradsman);
	  		}if($tradsman_homeowner != ''){
	  			$tradsman_homeowner_f = implode(",",$tradsman_homeowner);
	  		}if($tradsman_tradsman != ''){
	  			$tradsman_tradsman_f = implode(",",$tradsman_tradsman);
	  		}
	  		$data1 = array(
	  			'min_amount_cashout'=>$min_amount_cashout_m,
	  			'min_quotes_received_homeowner'=>$min_quotes_received_m,
	  			'min_quotes_approved_tradsman'=>$min_quotes_approved_m,
	  			'comission_ref_homeowner'=>$comission_ref_hm,
	  			'comission_ref_tradsman'=>$comission_ref_tm,
	  			'payment_method'=>$payment_method,
	  			'banner'=>$banner,
	  			'participating_bid'=>$participating_bid,
	  			'referral_links_homeowner'=>$marketer_homeowner_f,
	  			'referral_links_tradsman'=>$marketer_tradsman_f
	  		);
	  		$data2 = array(
	  			'min_amount_cashout'=>$min_amount_cashout_h, 
	  			'min_quotes_received_homeowner'=>$min_quotes_received_h,
	  			'min_quotes_approved_tradsman'=>$min_quotes_approved_h,
	  			'comission_ref_homeowner'=>$comission_ref_hh,
	  			'comission_ref_tradsman'=>$comission_ref_th1,
	  			'referral_links_homeowner'=>$homeowner_homeowner_f,
	  			'referral_links_tradsman'=>$homeowner_tradsman_f
	  		);
	  		$data3 = array(
	  			'min_quotes_received_homeowner'=>$min_quotes_received_t,
	  			'min_quotes_approved_tradsman'=>$min_quotes_approved_t,
	  			'comission_ref_homeowner'=>$comission_ref_th,
	  			'comission_ref_tradsman'=>$comission_ref_tt,
	  			'referral_links_homeowner'=>$tradsman_homeowner_f,
	  			'referral_links_tradsman'=>$tradsman_tradsman_f
	  		);	
	  		$this->db->where('id','1');
	  		$this->db->update('admin_settings',$data1);
	  		$this->db->where('id','2');
	  		$this->db->update('admin_settings',$data2);
	  		$this->db->where('id','3');
	  		$this->db->update('admin_settings',$data3);
	  		$this->session->set_flashdata('message','Settings Updated Successfully');
	  			redirect('Admin/Admin/admin_settings');
	   }                
		public function update_payment() {
        $this->form_validation->set_rules('p_max_w', 'Max Withdraw', 'trim|required');
        $this->form_validation->set_rules('p_min_w', 'Min Withdraw', 'trim|required');
        $this->form_validation->set_rules('p_max_d', 'Max Deposit', 'trim|required');
        $this->form_validation->set_rules('p_min_d', 'Min Deposit', 'trim|required');
        $this->form_validation->set_rules('commision', 'Commission', 'trim|required|numeric');
        $this->form_validation->set_rules('invite_to_review_status', 'invite to review', 'trim|required|integer');
        $this->form_validation->set_rules('waiting_time_accept_offer', 'waiting time accept offer', 'trim|required|integer');
        $this->form_validation->set_rules('waiting_time', 'Wating time', 'trim|required|integer');
        $this->form_validation->set_rules('processing_fee', 'Processing fee', 'trim|required|numeric|greater_than_equal_to[0]|less_than_equal_to[100]');
        $this->form_validation->set_rules('paypal_comm_per', 'Paypal percent', 'trim|required|numeric|greater_than_equal_to[0]|less_than_equal_to[100]');
        $this->form_validation->set_rules('paypal_comm_fix', 'Paypal fixed', 'trim|required|numeric|greater_than_equal_to[0]');
        $this->form_validation->set_rules('stripe_comm_per', 'Stripe percent', 'trim|required|numeric|greater_than_equal_to[0]|less_than_equal_to[100]');
        $this->form_validation->set_rules('stripe_comm_fix', 'Stripe fixed', 'trim|required|numeric|greater_than_equal_to[0]');
        $this->form_validation->set_rules('feedback_day_limit', 'Feedback/Review validity', 'trim|required|integer');

		if($this->form_validation->run()==FALSE){
         $this->session->set_flashdata('msg','<div class="alert alert-danger">'.validation_errors().'</div>');  
		}else{
		 $update['p_max_w']=$this->input->post('p_max_w');	
		 $update['p_min_w']=$this->input->post('p_min_w');	
		 $update['p_max_d']=$this->input->post('p_max_d');	
		 $update['p_min_d']= $this->input->post('p_min_d');	
		 $update['commision']=$this->input->post('commision');
		 $update['processing_fee']=$this->input->post('processing_fee');
		 $update['feedback_day_limit']=$this->input->post('feedback_day_limit');
		 $update['paypal_comm_per']=$this->input->post('paypal_comm_per');
		 $update['paypal_comm_fix']=$this->input->post('paypal_comm_fix');
		 $update['stripe_comm_per']=$this->input->post('stripe_comm_per');
		 $update['stripe_comm_fix']=$this->input->post('stripe_comm_fix');
		 $update['credit_amount']=$this->input->post('credit_amount');
		 $update['closed_date']=$this->input->post('closed_date');
		 $update['waiting_time']=$this->input->post('waiting_time');
		 $update['invite_to_review_status']=$this->input->post('invite_to_review_status');
		 $update['waiting_time_accept_offer']=$this->input->post('waiting_time_accept_offer');
		 $update['acc_name']=$this->input->post('acc_name');
		 $update['sort_code']=$this->input->post('sort_code');
		 $update['acc_number']=$this->input->post('acc_number');
		 $update['bank_name']=$this->input->post('bank_name');
		
         $id=$this->input->post('admin_id');   
	     $result=$this->Common_model->update('admin',array('id'=>$id),$update);
		     if($result){
              $this->session->set_flashdata('msg','<div class="alert alert-success">Success! Updated Successfully.</div>');
		     }else{
              $this->session->set_flashdata('msg','<div class="alert alert-danger">We have not found any changes.</div>');
		     }
	 
	   }
	   redirect('payment_setting');
	}  
	function withdrawal_history()
	{
			$data['withdrawal']=$this->Common_model->get_all_withdrawal('tbl_withdrawal');
		
		$this->load->view('Admin/withdrawal_history',$data);
		
	}

	public function HamePageBanner() { 
		//  $result['categorylist']=$this->My_model->alldata('category');
		$result['listing']=$this->Common_model->newgetRows('hamepage_banner','','hb_id');
		if($result['listing']==''){
			$result['listing']  =array();     
		}
		
		$this->load->view('Admin/hame_page_banner',$result);		
	}


  public function AddHomeBanner(){
    $json['status']=0;
    $this->form_validation->set_rules('hb_day', 'Day', 'trim|required');
    if($this->form_validation->run()==FALSE){
    $json['msg'] = '<div class="alert alert-danger">'.validation_errors().'</div>';
    }else{
      $insertData['hb_day']=$this->input->post('hb_day');
      if($_FILES['hb_banner']['name']){
        $config['upload_path']   = './img/HomeBanner/';
        $config['allowed_types'] = 'gif|jpg|png|jpeg';  
        $config['max_width'] = 1920;
        $config['min_width'] = 1348;
        $config['max_height'] = 750;
        $config['min_height'] = 540;
        $config['encrypt_name'] = TRUE;
        $this->load->library('upload', $config);
        //$this->upload->do_upload('cat_image');
         if($this->upload->do_upload('hb_banner')){
          $data = $this->upload->data();
          $insertData['hb_banner']=$data['file_name'];
          $result=$this->My_model->insert_entry('hamepage_banner',$insertData);
          $json['status']=1;    
          $this->session->set_flashdata('success', 'Success!  Banner has been added successfully.');
        }else{
          $json['msg'] = '<div class="alert alert-danger">'.$this->upload->display_errors().'<div>';
        }
      }else{
        $json['msg'] = '<div class="alert alert-danger"> banner is required! <div>';
      }
     }
    echo json_encode($json);
   }

	public function EditHomeBanner(){
		$json['status']=0;


		$json['status']=0;
		$this->form_validation->set_rules('hb_day', 'Day', 'trim|required');
		if($this->form_validation->run()==FALSE){
		$json['msg'] = '<div class="alert alert-danger">'.validation_errors().'</div>';
		}else{
			  $check = true;
			/*$insertData['start_date'] = date('Y-m-d',strtotime($this->input->post('start_date')));
				$insertData['end_date'] = date('Y-m-d',strtotime($this->input->post('end_date')));*/
				$insertData['hb_day']=$this->input->post('hb_day');
				if($_FILES['hb_banner']['name']){	 
					$config['upload_path']   = './img/HomeBanner/';
					$config['allowed_types'] = 'gif|jpg|png|jpeg';  
					$config['remove_spaces'] = TRUE;	
					$config['encrypt_name'] = TRUE;	
					$config['max_width'] = 1920;	
					$config['min_width'] = 1348;	
					$config['max_height'] = 750;	
					$config['min_height'] = 540;					
					$this->load->library('upload', $config);
					
					if($this->upload->do_upload('hb_banner')) {
						$data = $this->upload->data();
						$insertData['hb_banner']=$data['file_name'];
					} else {
						$check = false;
						$json['msg'] = '<div class="alert alert-danger">'.$this->upload->display_errors().'<div>';
					}
				}
					  
				//$this->upload->do_upload('cat_image');
				if($check) {
					
						$hb_id = $this->input->post('hb_id');
					
					$result=$this->My_model->update_entry('hamepage_banner',$insertData,array('hb_id'=>$hb_id));
					$json['status']=1;    
					$this->session->set_flashdata('success', 'Success!  Banner has been added successfully.');
				}
	    }
			//echo $this->db->last_query();
			echo json_encode($json);
	 }

	 function delete_homebanner($id){
	      $id=$this->uri->segment(4);
	     
			 if($id==1){
				 $this->session->set_flashdata('error', 'error!  something went wrong.');
			 } else {
	      $hamepage_banner=$this->Common_model->get_single_data('hamepage_banner',array('hb_id'=>$id));
	      $result=$this->Common_model->delete(array('hb_id'=>$id),'hamepage_banner'); 
		  
	      /*$this->db->last_query();*/
	      if($result){
	      	if($hamepage_banner){
	          unlink('img/HomeBanner/'.$hamepage_banner['hb_banner']);		
	      	}
            $this->session->set_flashdata('success', 'Success!  Banner has been deleted successfully.');
	      }else{
            $this->session->set_flashdata('error', 'error!  something went wrong.');
	      }
			 }
	      redirect('homepage_banner');
	 }

  public function deactivate_category($id){
    $update['is_activate'] = 0;
    $this->My_model->update_entry('category', $update, array('cat_id' => $id));
    $this->session->set_flashdata('success', 'Success! Category deactivated successfully.');
    redirect('category');
  }

  public function activate_category($id){
    $update['is_activate'] = 1;
    $this->My_model->update_entry('category', $update, array('cat_id' => $id));
    $this->session->set_flashdata('success', 'Success! Category activated successfully.');
    redirect('category');
  }

  public function ratings_management(){
    $pageData = [];

    $joins[0][0] = 'users AS by_user';
    $joins[0][1] = 'ratings.rt_rateBy = by_user.id';
    $joins[0][2] = 'left';
    $joins[1][0] = 'users AS to_user';
    $joins[1][1] = 'ratings.rt_rateTo = to_user.id';
    $joins[1][2] = 'left';
    $joins[2][0] = 'tbl_jobs';
    $joins[2][1] = 'ratings.rt_jobid = tbl_jobs.job_id';
    $joins[2][2] = 'left';
    $select = "ratings.*, by_user.id AS by_userId, CONCAT(by_user.f_name, ' ', by_user.l_name) AS by_username, to_user.id AS to_userId, to_user.trading_name AS trading_name, CONCAT(to_user.f_name, ' ', to_user.l_name) AS to_username, tbl_jobs.job_id, tbl_jobs.title";
    $pageData['ratings'] = $this->Common_model->join_records('rating_table as ratings', $joins, false, $select,'tr_id');

    /*
    $joins[0][0] = 'tbl_jobs';
    $joins[0][1] = 'rating_table.rt_jobid = tbl_jobs.job_id';
    $joins[0][2] = 'left';
    $ratings = $this->Common_model->join_records('rating_table', $joins);

    $ratings = $this->Common_model->get_all_data('rating_table');
    foreach($ratings as $key => $rating){
      $where['id'] = $rating['rt_rateBy'];
      $user = $this->Common_model->get_single_data('users', $where);
      $ratings[$key]['rateBy'] = $user['f_name'] .' ' .$user['l_name'];

      $where['id'] = $rating['rt_rateTo'];
      $user = $this->Common_model->get_single_data('users', $where);
      $ratings[$key]['rateTo'] = $user['f_name'] .' ' .$user['l_name'];
    }
    $pageData['ratings'] = $ratings;
    */

    $this->load->view('Admin/include/header');
    $this->load->view('Admin/ratings-management', $pageData);
    $this->load->view('Admin/include/footer');
  }

  public function update_rating(){
    $response['status'] = 0;
    $where['tr_id'] = $this->input->post('ratingId');
    $update['rt_rate'] = $this->input->post('rt_rate');
    $update['rt_comment'] = $this->input->post('rt_comment');
    $rating = $this->Common_model->get_single_data('rating_table', $where);
    if($this->My_model->update_entry('rating_table', $update, $where)){
			
			$get_avg_rating=$this->Common_model->get_avg_rating($rating['rt_rateTo']);
			$avg= $get_avg_rating[0]['avg'];
			
			$update2['average_rate']=$avg;
			$runss1 = $this->Common_model->update('users',array('id'=>$rating['rt_rateTo']),$update2);
			
      $response['status'] = 1;
      $response['newRating'] = $update['rt_rate'];
    }
    echo json_encode($response);
  }

  public function delete_rating(){
    $response['status'] = 0;
    $ratingId = $this->input->post('ratingId');
		
		$rating = $this->Common_model->GetColumnName('rating_table',array('tr_id'=>$ratingId),array('rt_rateTo'));
		
    if($this->Common_model->delete(array('tr_id' => $ratingId),'rating_table')){
			
			$get_avg_rating=$this->Common_model->get_avg_rating($rating['rt_rateTo']);
			$avg= $get_avg_rating[0]['avg'];
			
			$get_user=$this->Common_model->GetColumnName('users',array('id'=>$rating['rt_rateTo']),array('total_reviews'));
			
			$review=$get_user['total_reviews'];
			
			$update2['average_rate']=$avg;
			$update2['total_reviews']=$review-1;
			$runss1 = $this->Common_model->update('users',array('id'=>$rating['rt_rateTo']),$update2);
			
      $response['status'] = 1;
      $response['sql'] = $this->db->last_query();
    }
    echo json_encode($response);
  }

  public function delete_job(){
    $response['status'] = 0;
    $this->session->set_flashdata('responseMessage', '<div class="alert alert-danger">Something went wrong. Please try again later.</div>');
    $job_id = $this->input->post('job_id');

    if($this->Common_model->delete(array('job_id' => $job_id),'tbl_jobs')){
      $this->session->set_flashdata('responseMessage', '<div class="alert alert-success">Post deleted successfully.</div>');
      $response['status'] = 1;

      $this->Common_model->delete(array('job_id' => $job_id),'tbl_jobpost_bids');
      $this->Common_model->delete(array('post_id' => $job_id),'chat');
      $disputeDetails = $this->Common_model->fetch_records('tbl_dispute', array('ds_job_id' => $job_id));
      if(!empty($disputeDetails)){
        $this->Common_model->delete(array('dct_disputid' => $disputeDetails[0]['ds_id']),'disput_conversation_tbl');
        $this->Common_model->delete(array('ds_job_id' => $job_id), 'tbl_dispute');
      }
    }
    echo json_encode($response);
  }





  public function update_ticket_status()
  {
  	
    $tecketsList = $this->Common_model->get_all_data('admin_chats', ['ticket_status'=>0]);
    // $messages = $this->common_model->get_all_data('admin_chat_details', array('admin_chat_id' => $response['admin_chat_id']));

  		echo "<pre>"; 

  	foreach ($tecketsList as $key => $ticket) {
	    $chats = $this->Common_model->GetSingleData('admin_chat_details', array('admin_chat_id' => $ticket['id']), 'id', 'desc');
	    if(!empty($chats)){

	    	if($chats['is_admin']==1){
	    		$time = date('Y-m-d H:i:s');
	    	
	    		$expaire = date('Y-m-d H:i:s', strtotime($chats['create_time'].' + 48 hours'));
	    		if(strtotime($time) > strtotime($expaire)){
	    			print_r($chats);
	    		}


	    	}

  		


	    }
  		
  	}

exit('test');

  }

}